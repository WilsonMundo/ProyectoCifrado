@page "/Account/cifrado-text"




@inject IEncryptionService _encriptado
@inject ApplicationDbContext _context
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView Context="autorizeview">
    <div class="container mt-5">
        <h2 class="mb-4">🔐 Cifrado de Texto</h2>

        @if (ShowAlert)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <strong>¡Éxito!</strong> Texto encriptado correctamente. Guarda esta clave en un lugar seguro:
                <br />
                <code>@GeneratedKey</code>


            </div>
        }
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <strong>¡Error!</strong> ErrorMessage
                <br />
            </div>
        }

        <div class="card p-4">

            <EditForm Model="encriptaTexto" OnValidSubmit="@EncryptText" FormName="EncryptForm" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="textToEncrypt">📝 Texto a Cifrar</label>
                    <InputTextArea placeholder="Ingresa el texto que deseas cifrar"
                                   class="form-control"
                                   @bind-Value="encriptaTexto.TextToEncrypt"
                                   rows="4"></InputTextArea>
                    <ValidationMessage For="() => encriptaTexto.TextToEncrypt" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary mt-3">🔒 Cifrar Texto</button>
            </EditForm>
        </div>
    </div>

</AuthorizeView>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

    
        if (user == null || !user.Identity?.IsAuthenticated == true)
        {
          
            Navigation.NavigateTo("/Account/AccessDenied", forceLoad: true);
        }
    }
    
}
